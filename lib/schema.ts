import type { Prisma } from "@prisma/client";
import * as z from "zod";

// generated by https://github.com/chrishoermann/zod-prisma-types?tab=readme-ov-file#skip-schema-generation
// copy from ./prisma/generated/zod, paste here for speed and flexibility

export const UserRoleSchema = z.enum(["USER", "ADMIN"]);
export type UserRoleType = `${z.infer<typeof UserRoleSchema>}`;

export const UserSchema = z.object({
	role: UserRoleSchema,
	id: z.string().cuid(),
	name: z.string().nullable(),
	email: z.string().email({ message: "Invalid email" }),
	emailVerified: z.coerce.date().nullable(),
	image: z.string().nullable(),
	password: z
		.string()
		.min(6, { message: "Password must be at least 6 characters" })
		.nullable(),
});

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z
	.object({
		id: z.string().cuid().optional(),
		name: z.string().optional().nullable(),
		email: z.string().email({ message: "Invalid email" }),
		emailVerified: z.coerce.date().optional().nullable(),
		image: z.string().optional().nullable(),
		password: z
			.string()
			.min(6, { message: "Password must be at least 6 characters" })
			.optional()
			.nullable(),
		role: z.lazy(() => UserRoleSchema).optional(),
		// accounts: z
		// .lazy(() => AccountCreateNestedManyWithoutUserInputSchema)
		// .optional(),
	})
	.strict();
